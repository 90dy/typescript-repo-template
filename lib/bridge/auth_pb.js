"use strict";

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');

var goog = jspb;
var global = Function('return this')();

var google_protobuf_api_pb = require('google-protobuf/google/protobuf/api_pb.js');

goog.object.extend(proto, google_protobuf_api_pb);

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');

goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.bridge.UsernameAndPassword', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */

proto.bridge.UsernameAndPassword = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.bridge.UsernameAndPassword, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bridge.UsernameAndPassword.displayName = 'proto.bridge.UsernameAndPassword';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bridge.UsernameAndPassword.prototype.toObject = function (opt_includeInstance) {
    return proto.bridge.UsernameAndPassword.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bridge.UsernameAndPassword} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.bridge.UsernameAndPassword.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      username: jspb.Message.getFieldWithDefault(msg, 1, ""),
      password: jspb.Message.getFieldWithDefault(msg, 2, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bridge.UsernameAndPassword}
 */


proto.bridge.UsernameAndPassword.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bridge.UsernameAndPassword();
  return proto.bridge.UsernameAndPassword.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bridge.UsernameAndPassword} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bridge.UsernameAndPassword}
 */


proto.bridge.UsernameAndPassword.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setUsername(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setPassword(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.bridge.UsernameAndPassword.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bridge.UsernameAndPassword.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bridge.UsernameAndPassword} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.bridge.UsernameAndPassword.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getUsername();

  if (f.length > 0) {
    writer.writeString(1, f);
  }

  f = message.getPassword();

  if (f.length > 0) {
    writer.writeString(2, f);
  }
};
/**
 * optional string username = 1;
 * @return {string}
 */


proto.bridge.UsernameAndPassword.prototype.getUsername = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, "")
  );
};
/** @param {string} value */


proto.bridge.UsernameAndPassword.prototype.setUsername = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string password = 2;
 * @return {string}
 */


proto.bridge.UsernameAndPassword.prototype.getPassword = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, "")
  );
};
/** @param {string} value */


proto.bridge.UsernameAndPassword.prototype.setPassword = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

goog.object.extend(exports, proto.bridge);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,