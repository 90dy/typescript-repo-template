"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.google = exports.bridge = void 0;

var $protobuf = _interopRequireWildcard(require("protobufjs"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Namespace bridge. */
var bridge;
/** Namespace google. */

exports.bridge = bridge;

(function (_bridge) {
  /** Represents an Auth */
  var Auth =
  /*#__PURE__*/
  function (_$protobuf$rpc$Servic) {
    _inherits(Auth, _$protobuf$rpc$Servic);

    function Auth() {
      _classCallCheck(this, Auth);

      return _possibleConstructorReturn(this, _getPrototypeOf(Auth).apply(this, arguments));
    }

    return Auth;
  }($protobuf.rpc.Service);

  (function (_Auth) {})(Auth || (Auth = {}));

  /** Represents a UsernameAndPassword. */
  var UsernameAndPassword = function UsernameAndPassword() {
    _classCallCheck(this, UsernameAndPassword);

    _defineProperty(this, "username", void 0);

    _defineProperty(this, "password", void 0);
  };
})(bridge || (exports.bridge = bridge = {}));

var google;
exports.google = google;

(function (_google) {
  var protobuf;

  (function (_protobuf) {
    /** Properties of an Api. */

    /** Represents an Api. */
    var Api = function Api() {
      _classCallCheck(this, Api);

      _defineProperty(this, "name", void 0);

      _defineProperty(this, "methods", void 0);

      _defineProperty(this, "options", void 0);

      _defineProperty(this, "version", void 0);

      _defineProperty(this, "sourceContext", void 0);

      _defineProperty(this, "mixins", void 0);

      _defineProperty(this, "syntax", void 0);
    };
    /** Properties of a Method. */


    /** Represents a Method. */
    var Method = function Method() {
      _classCallCheck(this, Method);

      _defineProperty(this, "name", void 0);

      _defineProperty(this, "requestTypeUrl", void 0);

      _defineProperty(this, "requestStreaming", void 0);

      _defineProperty(this, "responseTypeUrl", void 0);

      _defineProperty(this, "responseStreaming", void 0);

      _defineProperty(this, "options", void 0);

      _defineProperty(this, "syntax", void 0);
    };
    /** Properties of a Mixin. */


    /** Represents a Mixin. */
    var Mixin = function Mixin() {
      _classCallCheck(this, Mixin);

      _defineProperty(this, "name", void 0);

      _defineProperty(this, "root", void 0);
    };
    /** Properties of a SourceContext. */


    /** Represents a SourceContext. */
    var SourceContext = function SourceContext() {
      _classCallCheck(this, SourceContext);

      _defineProperty(this, "fileName", void 0);
    };
    /** Properties of a Type. */


    /** Represents a Type. */
    var Type = function Type() {
      _classCallCheck(this, Type);

      _defineProperty(this, "name", void 0);

      _defineProperty(this, "fields", void 0);

      _defineProperty(this, "oneofs", void 0);

      _defineProperty(this, "options", void 0);

      _defineProperty(this, "sourceContext", void 0);

      _defineProperty(this, "syntax", void 0);
    };
    /** Properties of a Field. */


    /** Represents a Field. */
    var Field = function Field() {
      _classCallCheck(this, Field);

      _defineProperty(this, "kind", void 0);

      _defineProperty(this, "cardinality", void 0);

      _defineProperty(this, "number", void 0);

      _defineProperty(this, "name", void 0);

      _defineProperty(this, "typeUrl", void 0);

      _defineProperty(this, "oneofIndex", void 0);

      _defineProperty(this, "packed", void 0);

      _defineProperty(this, "options", void 0);

      _defineProperty(this, "jsonName", void 0);

      _defineProperty(this, "defaultValue", void 0);
    };

    (function (_Field) {
      /** Kind enum. */
      var Kind;
      /** Cardinality enum. */

      (function (Kind) {
        Kind[Kind["TYPE_UNKNOWN"] = 0] = "TYPE_UNKNOWN";
        Kind[Kind["TYPE_DOUBLE"] = 1] = "TYPE_DOUBLE";
        Kind[Kind["TYPE_FLOAT"] = 2] = "TYPE_FLOAT";
        Kind[Kind["TYPE_INT64"] = 3] = "TYPE_INT64";
        Kind[Kind["TYPE_UINT64"] = 4] = "TYPE_UINT64";
        Kind[Kind["TYPE_INT32"] = 5] = "TYPE_INT32";
        Kind[Kind["TYPE_FIXED64"] = 6] = "TYPE_FIXED64";
        Kind[Kind["TYPE_FIXED32"] = 7] = "TYPE_FIXED32";
        Kind[Kind["TYPE_BOOL"] = 8] = "TYPE_BOOL";
        Kind[Kind["TYPE_STRING"] = 9] = "TYPE_STRING";
        Kind[Kind["TYPE_GROUP"] = 10] = "TYPE_GROUP";
        Kind[Kind["TYPE_MESSAGE"] = 11] = "TYPE_MESSAGE";
        Kind[Kind["TYPE_BYTES"] = 12] = "TYPE_BYTES";
        Kind[Kind["TYPE_UINT32"] = 13] = "TYPE_UINT32";
        Kind[Kind["TYPE_ENUM"] = 14] = "TYPE_ENUM";
        Kind[Kind["TYPE_SFIXED32"] = 15] = "TYPE_SFIXED32";
        Kind[Kind["TYPE_SFIXED64"] = 16] = "TYPE_SFIXED64";
        Kind[Kind["TYPE_SINT32"] = 17] = "TYPE_SINT32";
        Kind[Kind["TYPE_SINT64"] = 18] = "TYPE_SINT64";
      })(Kind || (Kind = {}));

      var Cardinality;

      (function (Cardinality) {
        Cardinality[Cardinality["CARDINALITY_UNKNOWN"] = 0] = "CARDINALITY_UNKNOWN";
        Cardinality[Cardinality["CARDINALITY_OPTIONAL"] = 1] = "CARDINALITY_OPTIONAL";
        Cardinality[Cardinality["CARDINALITY_REQUIRED"] = 2] = "CARDINALITY_REQUIRED";
        Cardinality[Cardinality["CARDINALITY_REPEATED"] = 3] = "CARDINALITY_REPEATED";
      })(Cardinality || (Cardinality = {}));
    })(Field || (Field = {}));

    /** Represents an Enum. */
    var Enum = function Enum() {
      _classCallCheck(this, Enum);

      _defineProperty(this, "name", void 0);

      _defineProperty(this, "enumvalue", void 0);

      _defineProperty(this, "options", void 0);

      _defineProperty(this, "sourceContext", void 0);

      _defineProperty(this, "syntax", void 0);
    };
    /** Properties of an EnumValue. */


    /** Represents an EnumValue. */
    var EnumValue = function EnumValue() {
      _classCallCheck(this, EnumValue);

      _defineProperty(this, "name", void 0);

      _defineProperty(this, "number", void 0);

      _defineProperty(this, "options", void 0);
    };
    /** Properties of an Option. */


    /** Represents an Option. */
    var Option = function Option() {
      _classCallCheck(this, Option);

      _defineProperty(this, "name", void 0);

      _defineProperty(this, "value", void 0);
    };
    /** Syntax enum. */


    var Syntax;
    /** Properties of an Any. */

    (function (Syntax) {
      Syntax[Syntax["SYNTAX_PROTO2"] = 0] = "SYNTAX_PROTO2";
      Syntax[Syntax["SYNTAX_PROTO3"] = 1] = "SYNTAX_PROTO3";
    })(Syntax || (Syntax = {}));

    /** Represents an Any. */
    var Any = function Any() {
      _classCallCheck(this, Any);

      _defineProperty(this, "type_url", void 0);

      _defineProperty(this, "value", void 0);
    };
    /** Properties of an Empty. */


    /** Represents an Empty. */
    var Empty = function Empty() {
      _classCallCheck(this, Empty);
    };
  })(protobuf || (protobuf = {}));
})(google || (exports.google = google = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9icmlkZ2UvYXV0aC5wYi5kLnRzIl0sIm5hbWVzIjpbIkF1dGgiLCIkcHJvdG9idWYiLCJycGMiLCJTZXJ2aWNlIiwiVXNlcm5hbWVBbmRQYXNzd29yZCIsImJyaWRnZSIsIkFwaSIsIk1ldGhvZCIsIk1peGluIiwiU291cmNlQ29udGV4dCIsIlR5cGUiLCJGaWVsZCIsIktpbmQiLCJDYXJkaW5hbGl0eSIsIkVudW0iLCJFbnVtVmFsdWUiLCJPcHRpb24iLCJTeW50YXgiLCJBbnkiLCJFbXB0eSIsInByb3RvYnVmIiwiZ29vZ2xlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7O0FBc0tBOzs7OztBQW5LSTtNQUNNQSxJOzs7Ozs7Ozs7Ozs7SUFBYUMsU0FBUyxDQUFDQyxHQUFWLENBQWNDLE87O3dCQWdEdkJILEksS0FBQUEsSTs7QUEyQlY7TUFDTUksbUI7Ozs7Ozs7R0EvRU9DLE0sc0JBQUFBLE07Ozs7Ozs7OztBQTJLVDs7QUF5QkE7UUFDTUMsRzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvR047OztBQXlCQTtRQUNNQyxNOzs7Ozs7Ozs7Ozs7Ozs7OztBQW9HTjs7O0FBVUE7UUFDTUMsSzs7Ozs7OztBQXFGTjs7O0FBT0E7UUFDTUMsYTs7Ozs7QUFrRk47OztBQXNCQTtRQUNNQyxJOzs7Ozs7Ozs7Ozs7Ozs7QUFpR047OztBQWtDQTtRQUNNQyxLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0dGO1VBQ0tDLEk7QUFzQkw7O2lCQXRCS0EsSTtBQUFBQSxRQUFBQSxJLENBQUFBLEk7QUFBQUEsUUFBQUEsSSxDQUFBQSxJO0FBQUFBLFFBQUFBLEksQ0FBQUEsSTtBQUFBQSxRQUFBQSxJLENBQUFBLEk7QUFBQUEsUUFBQUEsSSxDQUFBQSxJO0FBQUFBLFFBQUFBLEksQ0FBQUEsSTtBQUFBQSxRQUFBQSxJLENBQUFBLEk7QUFBQUEsUUFBQUEsSSxDQUFBQSxJO0FBQUFBLFFBQUFBLEksQ0FBQUEsSTtBQUFBQSxRQUFBQSxJLENBQUFBLEk7QUFBQUEsUUFBQUEsSSxDQUFBQSxJO0FBQUFBLFFBQUFBLEksQ0FBQUEsSTtBQUFBQSxRQUFBQSxJLENBQUFBLEk7QUFBQUEsUUFBQUEsSSxDQUFBQSxJO0FBQUFBLFFBQUFBLEksQ0FBQUEsSTtBQUFBQSxRQUFBQSxJLENBQUFBLEk7QUFBQUEsUUFBQUEsSSxDQUFBQSxJO0FBQUFBLFFBQUFBLEksQ0FBQUEsSTtBQUFBQSxRQUFBQSxJLENBQUFBLEk7U0FBQUEsSSxLQUFBQSxJOztVQXVCQUMsVzs7aUJBQUFBLFc7QUFBQUEsUUFBQUEsVyxDQUFBQSxXO0FBQUFBLFFBQUFBLFcsQ0FBQUEsVztBQUFBQSxRQUFBQSxXLENBQUFBLFc7QUFBQUEsUUFBQUEsVyxDQUFBQSxXO1NBQUFBLFcsS0FBQUEsVztPQTFCQ0YsSyxLQUFBQSxLOztBQXFEVjtRQUNNRyxJOzs7Ozs7Ozs7Ozs7O0FBOEZOOzs7QUFhQTtRQUNNQyxTOzs7Ozs7Ozs7QUF3Rk47OztBQVVBO1FBQ01DLE07Ozs7Ozs7QUFxRk47OztRQUNLQyxNO0FBS0w7O2VBTEtBLE07QUFBQUEsTUFBQUEsTSxDQUFBQSxNO0FBQUFBLE1BQUFBLE0sQ0FBQUEsTTtPQUFBQSxNLEtBQUFBLE07O0FBZUw7UUFDTUMsRzs7Ozs7OztBQXFGTjs7O0FBSUE7UUFDTUMsSzs7O0tBcm9DQUMsUSxLQUFBQSxRO0dBSEdDLE0sc0JBQUFBLE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyAkcHJvdG9idWYgZnJvbSBcInByb3RvYnVmanNcIjtcbi8qKiBOYW1lc3BhY2UgYnJpZGdlLiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBicmlkZ2Uge1xuXG4gICAgLyoqIFJlcHJlc2VudHMgYW4gQXV0aCAqL1xuICAgIGNsYXNzIEF1dGggZXh0ZW5kcyAkcHJvdG9idWYucnBjLlNlcnZpY2Uge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEF1dGggc2VydmljZS5cbiAgICAgICAgICogQHBhcmFtIHJwY0ltcGwgUlBDIGltcGxlbWVudGF0aW9uXG4gICAgICAgICAqIEBwYXJhbSBbcmVxdWVzdERlbGltaXRlZD1mYWxzZV0gV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZFxuICAgICAgICAgKiBAcGFyYW0gW3Jlc3BvbnNlRGVsaW1pdGVkPWZhbHNlXSBXaGV0aGVyIHJlc3BvbnNlcyBhcmUgbGVuZ3RoLWRlbGltaXRlZFxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IocnBjSW1wbDogJHByb3RvYnVmLlJQQ0ltcGwsIHJlcXVlc3REZWxpbWl0ZWQ/OiBib29sZWFuLCByZXNwb25zZURlbGltaXRlZD86IGJvb2xlYW4pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIG5ldyBBdXRoIHNlcnZpY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBycGMgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAqIEBwYXJhbSBycGNJbXBsIFJQQyBpbXBsZW1lbnRhdGlvblxuICAgICAgICAgKiBAcGFyYW0gW3JlcXVlc3REZWxpbWl0ZWQ9ZmFsc2VdIFdoZXRoZXIgcmVxdWVzdHMgYXJlIGxlbmd0aC1kZWxpbWl0ZWRcbiAgICAgICAgICogQHBhcmFtIFtyZXNwb25zZURlbGltaXRlZD1mYWxzZV0gV2hldGhlciByZXNwb25zZXMgYXJlIGxlbmd0aC1kZWxpbWl0ZWRcbiAgICAgICAgICogQHJldHVybnMgUlBDIHNlcnZpY2UuIFVzZWZ1bCB3aGVyZSByZXF1ZXN0cyBhbmQvb3IgcmVzcG9uc2VzIGFyZSBzdHJlYW1lZC5cbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHJwY0ltcGw6ICRwcm90b2J1Zi5SUENJbXBsLCByZXF1ZXN0RGVsaW1pdGVkPzogYm9vbGVhbiwgcmVzcG9uc2VEZWxpbWl0ZWQ/OiBib29sZWFuKTogQXV0aDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbHMgRGVzY3JpcHRvci5cbiAgICAgICAgICogQHBhcmFtIHJlcXVlc3QgRW1wdHkgbWVzc2FnZSBvciBwbGFpbiBvYmplY3RcbiAgICAgICAgICogQHBhcmFtIGNhbGxiYWNrIE5vZGUtc3R5bGUgY2FsbGJhY2sgY2FsbGVkIHdpdGggdGhlIGVycm9yLCBpZiBhbnksIGFuZCBBcGlcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBkZXNjcmlwdG9yKHJlcXVlc3Q6IGdvb2dsZS5wcm90b2J1Zi5JRW1wdHksIGNhbGxiYWNrOiBicmlkZ2UuQXV0aC5EZXNjcmlwdG9yQ2FsbGJhY2spOiB2b2lkO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxscyBEZXNjcmlwdG9yLlxuICAgICAgICAgKiBAcGFyYW0gcmVxdWVzdCBFbXB0eSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyBQcm9taXNlXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgZGVzY3JpcHRvcihyZXF1ZXN0OiBnb29nbGUucHJvdG9idWYuSUVtcHR5KTogUHJvbWlzZTxnb29nbGUucHJvdG9idWYuQXBpPjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbHMgQnlVc2VybmFtZUFuZFBhc3N3b3JkLlxuICAgICAgICAgKiBAcGFyYW0gcmVxdWVzdCBVc2VybmFtZUFuZFBhc3N3b3JkIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBOb2RlLXN0eWxlIGNhbGxiYWNrIGNhbGxlZCB3aXRoIHRoZSBlcnJvciwgaWYgYW55LCBhbmQgQXBpXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgYnlVc2VybmFtZUFuZFBhc3N3b3JkKHJlcXVlc3Q6IGJyaWRnZS5JVXNlcm5hbWVBbmRQYXNzd29yZCwgY2FsbGJhY2s6IGJyaWRnZS5BdXRoLkJ5VXNlcm5hbWVBbmRQYXNzd29yZENhbGxiYWNrKTogdm9pZDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbHMgQnlVc2VybmFtZUFuZFBhc3N3b3JkLlxuICAgICAgICAgKiBAcGFyYW0gcmVxdWVzdCBVc2VybmFtZUFuZFBhc3N3b3JkIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIFByb21pc2VcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBieVVzZXJuYW1lQW5kUGFzc3dvcmQocmVxdWVzdDogYnJpZGdlLklVc2VybmFtZUFuZFBhc3N3b3JkKTogUHJvbWlzZTxnb29nbGUucHJvdG9idWYuQXBpPjtcbiAgICB9XG5cbiAgICBuYW1lc3BhY2UgQXV0aCB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIGJyaWRnZS5BdXRoI2Rlc2NyaXB0b3J9LlxuICAgICAgICAgKiBAcGFyYW0gZXJyb3IgRXJyb3IsIGlmIGFueVxuICAgICAgICAgKiBAcGFyYW0gW3Jlc3BvbnNlXSBBcGlcbiAgICAgICAgICovXG4gICAgICAgIHR5cGUgRGVzY3JpcHRvckNhbGxiYWNrID0gKGVycm9yOiAoRXJyb3J8bnVsbCksIHJlc3BvbnNlPzogZ29vZ2xlLnByb3RvYnVmLkFwaSkgPT4gdm9pZDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGJhY2sgYXMgdXNlZCBieSB7QGxpbmsgYnJpZGdlLkF1dGgjYnlVc2VybmFtZUFuZFBhc3N3b3JkfS5cbiAgICAgICAgICogQHBhcmFtIGVycm9yIEVycm9yLCBpZiBhbnlcbiAgICAgICAgICogQHBhcmFtIFtyZXNwb25zZV0gQXBpXG4gICAgICAgICAqL1xuICAgICAgICB0eXBlIEJ5VXNlcm5hbWVBbmRQYXNzd29yZENhbGxiYWNrID0gKGVycm9yOiAoRXJyb3J8bnVsbCksIHJlc3BvbnNlPzogZ29vZ2xlLnByb3RvYnVmLkFwaSkgPT4gdm9pZDtcbiAgICB9XG5cbiAgICAvKiogUHJvcGVydGllcyBvZiBhIFVzZXJuYW1lQW5kUGFzc3dvcmQuICovXG4gICAgaW50ZXJmYWNlIElVc2VybmFtZUFuZFBhc3N3b3JkIHtcblxuICAgICAgICAvKiogVXNlcm5hbWVBbmRQYXNzd29yZCB1c2VybmFtZSAqL1xuICAgICAgICB1c2VybmFtZT86IChzdHJpbmd8bnVsbCk7XG5cbiAgICAgICAgLyoqIFVzZXJuYW1lQW5kUGFzc3dvcmQgcGFzc3dvcmQgKi9cbiAgICAgICAgcGFzc3dvcmQ/OiAoc3RyaW5nfG51bGwpO1xuICAgIH1cblxuICAgIC8qKiBSZXByZXNlbnRzIGEgVXNlcm5hbWVBbmRQYXNzd29yZC4gKi9cbiAgICBjbGFzcyBVc2VybmFtZUFuZFBhc3N3b3JkIGltcGxlbWVudHMgSVVzZXJuYW1lQW5kUGFzc3dvcmQge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFVzZXJuYW1lQW5kUGFzc3dvcmQuXG4gICAgICAgICAqIEBwYXJhbSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXM/OiBicmlkZ2UuSVVzZXJuYW1lQW5kUGFzc3dvcmQpO1xuXG4gICAgICAgIC8qKiBVc2VybmFtZUFuZFBhc3N3b3JkIHVzZXJuYW1lLiAqL1xuICAgICAgICBwdWJsaWMgdXNlcm5hbWU6IHN0cmluZztcblxuICAgICAgICAvKiogVXNlcm5hbWVBbmRQYXNzd29yZCBwYXNzd29yZC4gKi9cbiAgICAgICAgcHVibGljIHBhc3N3b3JkOiBzdHJpbmc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBuZXcgVXNlcm5hbWVBbmRQYXNzd29yZCBpbnN0YW5jZSB1c2luZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXG4gICAgICAgICAqIEBwYXJhbSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICogQHJldHVybnMgVXNlcm5hbWVBbmRQYXNzd29yZCBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUocHJvcGVydGllcz86IGJyaWRnZS5JVXNlcm5hbWVBbmRQYXNzd29yZCk6IGJyaWRnZS5Vc2VybmFtZUFuZFBhc3N3b3JkO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgVXNlcm5hbWVBbmRQYXNzd29yZCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBicmlkZ2UuVXNlcm5hbWVBbmRQYXNzd29yZC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgVXNlcm5hbWVBbmRQYXNzd29yZCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc3RhdGljIGVuY29kZShtZXNzYWdlOiBicmlkZ2UuSVVzZXJuYW1lQW5kUGFzc3dvcmQsIHdyaXRlcj86ICRwcm90b2J1Zi5Xcml0ZXIpOiAkcHJvdG9idWYuV3JpdGVyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgVXNlcm5hbWVBbmRQYXNzd29yZCBtZXNzYWdlLCBsZW5ndGggZGVsaW1pdGVkLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBicmlkZ2UuVXNlcm5hbWVBbmRQYXNzd29yZC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgVXNlcm5hbWVBbmRQYXNzd29yZCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc3RhdGljIGVuY29kZURlbGltaXRlZChtZXNzYWdlOiBicmlkZ2UuSVVzZXJuYW1lQW5kUGFzc3dvcmQsIHdyaXRlcj86ICRwcm90b2J1Zi5Xcml0ZXIpOiAkcHJvdG9idWYuV3JpdGVyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgVXNlcm5hbWVBbmRQYXNzd29yZCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAcGFyYW0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMgVXNlcm5hbWVBbmRQYXNzd29yZFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlKHJlYWRlcjogKCRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheSksIGxlbmd0aD86IG51bWJlcik6IGJyaWRnZS5Vc2VybmFtZUFuZFBhc3N3b3JkO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgVXNlcm5hbWVBbmRQYXNzd29yZCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgKiBAcGFyYW0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHJldHVybnMgVXNlcm5hbWVBbmRQYXNzd29yZFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlRGVsaW1pdGVkKHJlYWRlcjogKCRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheSkpOiBicmlkZ2UuVXNlcm5hbWVBbmRQYXNzd29yZDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVmVyaWZpZXMgYSBVc2VybmFtZUFuZFBhc3N3b3JkIG1lc3NhZ2UuXG4gICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAgICAgICAgICogQHJldHVybnMgYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc3RhdGljIHZlcmlmeShtZXNzYWdlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSk6IChzdHJpbmd8bnVsbCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBVc2VybmFtZUFuZFBhc3N3b3JkIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQHBhcmFtIG9iamVjdCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMgVXNlcm5hbWVBbmRQYXNzd29yZFxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHN0YXRpYyBmcm9tT2JqZWN0KG9iamVjdDogeyBbazogc3RyaW5nXTogYW55IH0pOiBicmlkZ2UuVXNlcm5hbWVBbmRQYXNzd29yZDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgVXNlcm5hbWVBbmRQYXNzd29yZCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIFVzZXJuYW1lQW5kUGFzc3dvcmRcbiAgICAgICAgICogQHBhcmFtIFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgc3RhdGljIHRvT2JqZWN0KG1lc3NhZ2U6IGJyaWRnZS5Vc2VybmFtZUFuZFBhc3N3b3JkLCBvcHRpb25zPzogJHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9ucyk6IHsgW2s6IHN0cmluZ106IGFueSB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFVzZXJuYW1lQW5kUGFzc3dvcmQgdG8gSlNPTi5cbiAgICAgICAgICogQHJldHVybnMgSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIHB1YmxpYyB0b0pTT04oKTogeyBbazogc3RyaW5nXTogYW55IH07XG4gICAgfVxufVxuXG4vKiogTmFtZXNwYWNlIGdvb2dsZS4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgZ29vZ2xlIHtcblxuICAgIC8qKiBOYW1lc3BhY2UgcHJvdG9idWYuICovXG4gICAgbmFtZXNwYWNlIHByb3RvYnVmIHtcblxuICAgICAgICAvKiogUHJvcGVydGllcyBvZiBhbiBBcGkuICovXG4gICAgICAgIGludGVyZmFjZSBJQXBpIHtcblxuICAgICAgICAgICAgLyoqIEFwaSBuYW1lICovXG4gICAgICAgICAgICBuYW1lPzogKHN0cmluZ3xudWxsKTtcblxuICAgICAgICAgICAgLyoqIEFwaSBtZXRob2RzICovXG4gICAgICAgICAgICBtZXRob2RzPzogKGdvb2dsZS5wcm90b2J1Zi5JTWV0aG9kW118bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKiBBcGkgb3B0aW9ucyAqL1xuICAgICAgICAgICAgb3B0aW9ucz86IChnb29nbGUucHJvdG9idWYuSU9wdGlvbltdfG51bGwpO1xuXG4gICAgICAgICAgICAvKiogQXBpIHZlcnNpb24gKi9cbiAgICAgICAgICAgIHZlcnNpb24/OiAoc3RyaW5nfG51bGwpO1xuXG4gICAgICAgICAgICAvKiogQXBpIHNvdXJjZUNvbnRleHQgKi9cbiAgICAgICAgICAgIHNvdXJjZUNvbnRleHQ/OiAoZ29vZ2xlLnByb3RvYnVmLklTb3VyY2VDb250ZXh0fG51bGwpO1xuXG4gICAgICAgICAgICAvKiogQXBpIG1peGlucyAqL1xuICAgICAgICAgICAgbWl4aW5zPzogKGdvb2dsZS5wcm90b2J1Zi5JTWl4aW5bXXxudWxsKTtcblxuICAgICAgICAgICAgLyoqIEFwaSBzeW50YXggKi9cbiAgICAgICAgICAgIHN5bnRheD86IChnb29nbGUucHJvdG9idWYuU3ludGF4fG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIFJlcHJlc2VudHMgYW4gQXBpLiAqL1xuICAgICAgICBjbGFzcyBBcGkgaW1wbGVtZW50cyBJQXBpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEFwaS5cbiAgICAgICAgICAgICAqIEBwYXJhbSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3RydWN0b3IocHJvcGVydGllcz86IGdvb2dsZS5wcm90b2J1Zi5JQXBpKTtcblxuICAgICAgICAgICAgLyoqIEFwaSBuYW1lLiAqL1xuICAgICAgICAgICAgcHVibGljIG5hbWU6IHN0cmluZztcblxuICAgICAgICAgICAgLyoqIEFwaSBtZXRob2RzLiAqL1xuICAgICAgICAgICAgcHVibGljIG1ldGhvZHM6IGdvb2dsZS5wcm90b2J1Zi5JTWV0aG9kW107XG5cbiAgICAgICAgICAgIC8qKiBBcGkgb3B0aW9ucy4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBvcHRpb25zOiBnb29nbGUucHJvdG9idWYuSU9wdGlvbltdO1xuXG4gICAgICAgICAgICAvKiogQXBpIHZlcnNpb24uICovXG4gICAgICAgICAgICBwdWJsaWMgdmVyc2lvbjogc3RyaW5nO1xuXG4gICAgICAgICAgICAvKiogQXBpIHNvdXJjZUNvbnRleHQuICovXG4gICAgICAgICAgICBwdWJsaWMgc291cmNlQ29udGV4dD86IChnb29nbGUucHJvdG9idWYuSVNvdXJjZUNvbnRleHR8bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKiBBcGkgbWl4aW5zLiAqL1xuICAgICAgICAgICAgcHVibGljIG1peGluczogZ29vZ2xlLnByb3RvYnVmLklNaXhpbltdO1xuXG4gICAgICAgICAgICAvKiogQXBpIHN5bnRheC4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBzeW50YXg6IGdvb2dsZS5wcm90b2J1Zi5TeW50YXg7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBBcGkgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICogQHBhcmFtIFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICogQHJldHVybnMgQXBpIGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHByb3BlcnRpZXM/OiBnb29nbGUucHJvdG9idWYuSUFwaSk6IGdvb2dsZS5wcm90b2J1Zi5BcGk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEFwaSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBnb29nbGUucHJvdG9idWYuQXBpLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgQXBpIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGVuY29kZShtZXNzYWdlOiBnb29nbGUucHJvdG9idWYuSUFwaSwgd3JpdGVyPzogJHByb3RvYnVmLldyaXRlcik6ICRwcm90b2J1Zi5Xcml0ZXI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEFwaSBtZXNzYWdlLCBsZW5ndGggZGVsaW1pdGVkLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBnb29nbGUucHJvdG9idWYuQXBpLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgQXBpIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGVuY29kZURlbGltaXRlZChtZXNzYWdlOiBnb29nbGUucHJvdG9idWYuSUFwaSwgd3JpdGVyPzogJHByb3RvYnVmLldyaXRlcik6ICRwcm90b2J1Zi5Xcml0ZXI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhbiBBcGkgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBwYXJhbSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHBhcmFtIFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIEFwaVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGRlY29kZShyZWFkZXI6ICgkcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXkpLCBsZW5ndGg/OiBudW1iZXIpOiBnb29nbGUucHJvdG9idWYuQXBpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYW4gQXBpIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIsIGxlbmd0aCBkZWxpbWl0ZWQuXG4gICAgICAgICAgICAgKiBAcGFyYW0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEByZXR1cm5zIEFwaVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGRlY29kZURlbGltaXRlZChyZWFkZXI6ICgkcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXkpKTogZ29vZ2xlLnByb3RvYnVmLkFwaTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBWZXJpZmllcyBhbiBBcGkgbWVzc2FnZS5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAgICAgICAgICAgICAqIEByZXR1cm5zIGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIHZlcmlmeShtZXNzYWdlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSk6IChzdHJpbmd8bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhbiBBcGkgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICogQHBhcmFtIG9iamVjdCBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqIEByZXR1cm5zIEFwaVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGZyb21PYmplY3Qob2JqZWN0OiB7IFtrOiBzdHJpbmddOiBhbnkgfSk6IGdvb2dsZS5wcm90b2J1Zi5BcGk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGFuIEFwaSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBBcGlcbiAgICAgICAgICAgICAqIEBwYXJhbSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyB0b09iamVjdChtZXNzYWdlOiBnb29nbGUucHJvdG9idWYuQXBpLCBvcHRpb25zPzogJHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9ucyk6IHsgW2s6IHN0cmluZ106IGFueSB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnZlcnRzIHRoaXMgQXBpIHRvIEpTT04uXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBKU09OIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgdG9KU09OKCk6IHsgW2s6IHN0cmluZ106IGFueSB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIFByb3BlcnRpZXMgb2YgYSBNZXRob2QuICovXG4gICAgICAgIGludGVyZmFjZSBJTWV0aG9kIHtcblxuICAgICAgICAgICAgLyoqIE1ldGhvZCBuYW1lICovXG4gICAgICAgICAgICBuYW1lPzogKHN0cmluZ3xudWxsKTtcblxuICAgICAgICAgICAgLyoqIE1ldGhvZCByZXF1ZXN0VHlwZVVybCAqL1xuICAgICAgICAgICAgcmVxdWVzdFR5cGVVcmw/OiAoc3RyaW5nfG51bGwpO1xuXG4gICAgICAgICAgICAvKiogTWV0aG9kIHJlcXVlc3RTdHJlYW1pbmcgKi9cbiAgICAgICAgICAgIHJlcXVlc3RTdHJlYW1pbmc/OiAoYm9vbGVhbnxudWxsKTtcblxuICAgICAgICAgICAgLyoqIE1ldGhvZCByZXNwb25zZVR5cGVVcmwgKi9cbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZVVybD86IChzdHJpbmd8bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKiBNZXRob2QgcmVzcG9uc2VTdHJlYW1pbmcgKi9cbiAgICAgICAgICAgIHJlc3BvbnNlU3RyZWFtaW5nPzogKGJvb2xlYW58bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKiBNZXRob2Qgb3B0aW9ucyAqL1xuICAgICAgICAgICAgb3B0aW9ucz86IChnb29nbGUucHJvdG9idWYuSU9wdGlvbltdfG51bGwpO1xuXG4gICAgICAgICAgICAvKiogTWV0aG9kIHN5bnRheCAqL1xuICAgICAgICAgICAgc3ludGF4PzogKGdvb2dsZS5wcm90b2J1Zi5TeW50YXh8bnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogUmVwcmVzZW50cyBhIE1ldGhvZC4gKi9cbiAgICAgICAgY2xhc3MgTWV0aG9kIGltcGxlbWVudHMgSU1ldGhvZCB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBNZXRob2QuXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXM/OiBnb29nbGUucHJvdG9idWYuSU1ldGhvZCk7XG5cbiAgICAgICAgICAgIC8qKiBNZXRob2QgbmFtZS4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG5cbiAgICAgICAgICAgIC8qKiBNZXRob2QgcmVxdWVzdFR5cGVVcmwuICovXG4gICAgICAgICAgICBwdWJsaWMgcmVxdWVzdFR5cGVVcmw6IHN0cmluZztcblxuICAgICAgICAgICAgLyoqIE1ldGhvZCByZXF1ZXN0U3RyZWFtaW5nLiAqL1xuICAgICAgICAgICAgcHVibGljIHJlcXVlc3RTdHJlYW1pbmc6IGJvb2xlYW47XG5cbiAgICAgICAgICAgIC8qKiBNZXRob2QgcmVzcG9uc2VUeXBlVXJsLiAqL1xuICAgICAgICAgICAgcHVibGljIHJlc3BvbnNlVHlwZVVybDogc3RyaW5nO1xuXG4gICAgICAgICAgICAvKiogTWV0aG9kIHJlc3BvbnNlU3RyZWFtaW5nLiAqL1xuICAgICAgICAgICAgcHVibGljIHJlc3BvbnNlU3RyZWFtaW5nOiBib29sZWFuO1xuXG4gICAgICAgICAgICAvKiogTWV0aG9kIG9wdGlvbnMuICovXG4gICAgICAgICAgICBwdWJsaWMgb3B0aW9uczogZ29vZ2xlLnByb3RvYnVmLklPcHRpb25bXTtcblxuICAgICAgICAgICAgLyoqIE1ldGhvZCBzeW50YXguICovXG4gICAgICAgICAgICBwdWJsaWMgc3ludGF4OiBnb29nbGUucHJvdG9idWYuU3ludGF4O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgTWV0aG9kIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIE1ldGhvZCBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShwcm9wZXJ0aWVzPzogZ29vZ2xlLnByb3RvYnVmLklNZXRob2QpOiBnb29nbGUucHJvdG9idWYuTWV0aG9kO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBNZXRob2QgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZ29vZ2xlLnByb3RvYnVmLk1ldGhvZC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIE1ldGhvZCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBlbmNvZGUobWVzc2FnZTogZ29vZ2xlLnByb3RvYnVmLklNZXRob2QsIHdyaXRlcj86ICRwcm90b2J1Zi5Xcml0ZXIpOiAkcHJvdG9idWYuV3JpdGVyO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBNZXRob2QgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZ29vZ2xlLnByb3RvYnVmLk1ldGhvZC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIE1ldGhvZCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZTogZ29vZ2xlLnByb3RvYnVmLklNZXRob2QsIHdyaXRlcj86ICRwcm90b2J1Zi5Xcml0ZXIpOiAkcHJvdG9idWYuV3JpdGVyO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYSBNZXRob2QgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBwYXJhbSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHBhcmFtIFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIE1ldGhvZFxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGRlY29kZShyZWFkZXI6ICgkcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXkpLCBsZW5ndGg/OiBudW1iZXIpOiBnb29nbGUucHJvdG9idWYuTWV0aG9kO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYSBNZXRob2QgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHJldHVybnMgTWV0aG9kXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlRGVsaW1pdGVkKHJlYWRlcjogKCRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheSkpOiBnb29nbGUucHJvdG9idWYuTWV0aG9kO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWVzIGEgTWV0aG9kIG1lc3NhZ2UuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAcmV0dXJucyBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyB2ZXJpZnkobWVzc2FnZTogeyBbazogc3RyaW5nXTogYW55IH0pOiAoc3RyaW5nfG51bGwpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBNZXRob2QgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICogQHBhcmFtIG9iamVjdCBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqIEByZXR1cm5zIE1ldGhvZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGZyb21PYmplY3Qob2JqZWN0OiB7IFtrOiBzdHJpbmddOiBhbnkgfSk6IGdvb2dsZS5wcm90b2J1Zi5NZXRob2Q7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgTWV0aG9kIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIE1ldGhvZFxuICAgICAgICAgICAgICogQHBhcmFtIFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAqIEByZXR1cm5zIFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIHRvT2JqZWN0KG1lc3NhZ2U6IGdvb2dsZS5wcm90b2J1Zi5NZXRob2QsIG9wdGlvbnM/OiAkcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zKTogeyBbazogc3RyaW5nXTogYW55IH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBNZXRob2QgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEByZXR1cm5zIEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyB0b0pTT04oKTogeyBbazogc3RyaW5nXTogYW55IH07XG4gICAgICAgIH1cblxuICAgICAgICAvKiogUHJvcGVydGllcyBvZiBhIE1peGluLiAqL1xuICAgICAgICBpbnRlcmZhY2UgSU1peGluIHtcblxuICAgICAgICAgICAgLyoqIE1peGluIG5hbWUgKi9cbiAgICAgICAgICAgIG5hbWU/OiAoc3RyaW5nfG51bGwpO1xuXG4gICAgICAgICAgICAvKiogTWl4aW4gcm9vdCAqL1xuICAgICAgICAgICAgcm9vdD86IChzdHJpbmd8bnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogUmVwcmVzZW50cyBhIE1peGluLiAqL1xuICAgICAgICBjbGFzcyBNaXhpbiBpbXBsZW1lbnRzIElNaXhpbiB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBNaXhpbi5cbiAgICAgICAgICAgICAqIEBwYXJhbSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3RydWN0b3IocHJvcGVydGllcz86IGdvb2dsZS5wcm90b2J1Zi5JTWl4aW4pO1xuXG4gICAgICAgICAgICAvKiogTWl4aW4gbmFtZS4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG5cbiAgICAgICAgICAgIC8qKiBNaXhpbiByb290LiAqL1xuICAgICAgICAgICAgcHVibGljIHJvb3Q6IHN0cmluZztcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IE1peGluIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIE1peGluIGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHByb3BlcnRpZXM/OiBnb29nbGUucHJvdG9idWYuSU1peGluKTogZ29vZ2xlLnByb3RvYnVmLk1peGluO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBNaXhpbiBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBnb29nbGUucHJvdG9idWYuTWl4aW4udmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBNaXhpbiBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBlbmNvZGUobWVzc2FnZTogZ29vZ2xlLnByb3RvYnVmLklNaXhpbiwgd3JpdGVyPzogJHByb3RvYnVmLldyaXRlcik6ICRwcm90b2J1Zi5Xcml0ZXI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIE1peGluIG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGdvb2dsZS5wcm90b2J1Zi5NaXhpbi52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIE1peGluIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGVuY29kZURlbGltaXRlZChtZXNzYWdlOiBnb29nbGUucHJvdG9idWYuSU1peGluLCB3cml0ZXI/OiAkcHJvdG9idWYuV3JpdGVyKTogJHByb3RvYnVmLldyaXRlcjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgTWl4aW4gbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBwYXJhbSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHBhcmFtIFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIE1peGluXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlKHJlYWRlcjogKCRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheSksIGxlbmd0aD86IG51bWJlcik6IGdvb2dsZS5wcm90b2J1Zi5NaXhpbjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgTWl4aW4gbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHJldHVybnMgTWl4aW5cbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyOiAoJHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5KSk6IGdvb2dsZS5wcm90b2J1Zi5NaXhpbjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBWZXJpZmllcyBhIE1peGluIG1lc3NhZ2UuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAcmV0dXJucyBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyB2ZXJpZnkobWVzc2FnZTogeyBbazogc3RyaW5nXTogYW55IH0pOiAoc3RyaW5nfG51bGwpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBNaXhpbiBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gb2JqZWN0IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICogQHJldHVybnMgTWl4aW5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBmcm9tT2JqZWN0KG9iamVjdDogeyBbazogc3RyaW5nXTogYW55IH0pOiBnb29nbGUucHJvdG9idWYuTWl4aW47XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgTWl4aW4gbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgTWl4aW5cbiAgICAgICAgICAgICAqIEBwYXJhbSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyB0b09iamVjdChtZXNzYWdlOiBnb29nbGUucHJvdG9idWYuTWl4aW4sIG9wdGlvbnM/OiAkcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zKTogeyBbazogc3RyaW5nXTogYW55IH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBNaXhpbiB0byBKU09OLlxuICAgICAgICAgICAgICogQHJldHVybnMgSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHRvSlNPTigpOiB7IFtrOiBzdHJpbmddOiBhbnkgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBQcm9wZXJ0aWVzIG9mIGEgU291cmNlQ29udGV4dC4gKi9cbiAgICAgICAgaW50ZXJmYWNlIElTb3VyY2VDb250ZXh0IHtcblxuICAgICAgICAgICAgLyoqIFNvdXJjZUNvbnRleHQgZmlsZU5hbWUgKi9cbiAgICAgICAgICAgIGZpbGVOYW1lPzogKHN0cmluZ3xudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBSZXByZXNlbnRzIGEgU291cmNlQ29udGV4dC4gKi9cbiAgICAgICAgY2xhc3MgU291cmNlQ29udGV4dCBpbXBsZW1lbnRzIElTb3VyY2VDb250ZXh0IHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFNvdXJjZUNvbnRleHQuXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXM/OiBnb29nbGUucHJvdG9idWYuSVNvdXJjZUNvbnRleHQpO1xuXG4gICAgICAgICAgICAvKiogU291cmNlQ29udGV4dCBmaWxlTmFtZS4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBmaWxlTmFtZTogc3RyaW5nO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgU291cmNlQ29udGV4dCBpbnN0YW5jZSB1c2luZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKiBAcmV0dXJucyBTb3VyY2VDb250ZXh0IGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHByb3BlcnRpZXM/OiBnb29nbGUucHJvdG9idWYuSVNvdXJjZUNvbnRleHQpOiBnb29nbGUucHJvdG9idWYuU291cmNlQ29udGV4dDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgU291cmNlQ29udGV4dCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBnb29nbGUucHJvdG9idWYuU291cmNlQ29udGV4dC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIFNvdXJjZUNvbnRleHQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZW5jb2RlKG1lc3NhZ2U6IGdvb2dsZS5wcm90b2J1Zi5JU291cmNlQ29udGV4dCwgd3JpdGVyPzogJHByb3RvYnVmLldyaXRlcik6ICRwcm90b2J1Zi5Xcml0ZXI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFNvdXJjZUNvbnRleHQgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvbnRleHQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBTb3VyY2VDb250ZXh0IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGVuY29kZURlbGltaXRlZChtZXNzYWdlOiBnb29nbGUucHJvdG9idWYuSVNvdXJjZUNvbnRleHQsIHdyaXRlcj86ICRwcm90b2J1Zi5Xcml0ZXIpOiAkcHJvdG9idWYuV3JpdGVyO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYSBTb3VyY2VDb250ZXh0IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgKiBAcGFyYW0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEBwYXJhbSBbbGVuZ3RoXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBTb3VyY2VDb250ZXh0XG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlKHJlYWRlcjogKCRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheSksIGxlbmd0aD86IG51bWJlcik6IGdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb250ZXh0O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYSBTb3VyY2VDb250ZXh0IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIsIGxlbmd0aCBkZWxpbWl0ZWQuXG4gICAgICAgICAgICAgKiBAcGFyYW0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEByZXR1cm5zIFNvdXJjZUNvbnRleHRcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyOiAoJHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5KSk6IGdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb250ZXh0O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWVzIGEgU291cmNlQ29udGV4dCBtZXNzYWdlLlxuICAgICAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAgICAgICAgICogQHJldHVybnMgYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgdmVyaWZ5KG1lc3NhZ2U6IHsgW2s6IHN0cmluZ106IGFueSB9KTogKHN0cmluZ3xudWxsKTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgU291cmNlQ29udGV4dCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gb2JqZWN0IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICogQHJldHVybnMgU291cmNlQ29udGV4dFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGZyb21PYmplY3Qob2JqZWN0OiB7IFtrOiBzdHJpbmddOiBhbnkgfSk6IGdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb250ZXh0O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFNvdXJjZUNvbnRleHQgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgU291cmNlQ29udGV4dFxuICAgICAgICAgICAgICogQHBhcmFtIFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAqIEByZXR1cm5zIFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIHRvT2JqZWN0KG1lc3NhZ2U6IGdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb250ZXh0LCBvcHRpb25zPzogJHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9ucyk6IHsgW2s6IHN0cmluZ106IGFueSB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnZlcnRzIHRoaXMgU291cmNlQ29udGV4dCB0byBKU09OLlxuICAgICAgICAgICAgICogQHJldHVybnMgSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHRvSlNPTigpOiB7IFtrOiBzdHJpbmddOiBhbnkgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBQcm9wZXJ0aWVzIG9mIGEgVHlwZS4gKi9cbiAgICAgICAgaW50ZXJmYWNlIElUeXBlIHtcblxuICAgICAgICAgICAgLyoqIFR5cGUgbmFtZSAqL1xuICAgICAgICAgICAgbmFtZT86IChzdHJpbmd8bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKiBUeXBlIGZpZWxkcyAqL1xuICAgICAgICAgICAgZmllbGRzPzogKGdvb2dsZS5wcm90b2J1Zi5JRmllbGRbXXxudWxsKTtcblxuICAgICAgICAgICAgLyoqIFR5cGUgb25lb2ZzICovXG4gICAgICAgICAgICBvbmVvZnM/OiAoc3RyaW5nW118bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKiBUeXBlIG9wdGlvbnMgKi9cbiAgICAgICAgICAgIG9wdGlvbnM/OiAoZ29vZ2xlLnByb3RvYnVmLklPcHRpb25bXXxudWxsKTtcblxuICAgICAgICAgICAgLyoqIFR5cGUgc291cmNlQ29udGV4dCAqL1xuICAgICAgICAgICAgc291cmNlQ29udGV4dD86IChnb29nbGUucHJvdG9idWYuSVNvdXJjZUNvbnRleHR8bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKiBUeXBlIHN5bnRheCAqL1xuICAgICAgICAgICAgc3ludGF4PzogKGdvb2dsZS5wcm90b2J1Zi5TeW50YXh8bnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogUmVwcmVzZW50cyBhIFR5cGUuICovXG4gICAgICAgIGNsYXNzIFR5cGUgaW1wbGVtZW50cyBJVHlwZSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBUeXBlLlxuICAgICAgICAgICAgICogQHBhcmFtIFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzPzogZ29vZ2xlLnByb3RvYnVmLklUeXBlKTtcblxuICAgICAgICAgICAgLyoqIFR5cGUgbmFtZS4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG5cbiAgICAgICAgICAgIC8qKiBUeXBlIGZpZWxkcy4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBmaWVsZHM6IGdvb2dsZS5wcm90b2J1Zi5JRmllbGRbXTtcblxuICAgICAgICAgICAgLyoqIFR5cGUgb25lb2ZzLiAqL1xuICAgICAgICAgICAgcHVibGljIG9uZW9mczogc3RyaW5nW107XG5cbiAgICAgICAgICAgIC8qKiBUeXBlIG9wdGlvbnMuICovXG4gICAgICAgICAgICBwdWJsaWMgb3B0aW9uczogZ29vZ2xlLnByb3RvYnVmLklPcHRpb25bXTtcblxuICAgICAgICAgICAgLyoqIFR5cGUgc291cmNlQ29udGV4dC4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBzb3VyY2VDb250ZXh0PzogKGdvb2dsZS5wcm90b2J1Zi5JU291cmNlQ29udGV4dHxudWxsKTtcblxuICAgICAgICAgICAgLyoqIFR5cGUgc3ludGF4LiAqL1xuICAgICAgICAgICAgcHVibGljIHN5bnRheDogZ29vZ2xlLnByb3RvYnVmLlN5bnRheDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IFR5cGUgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICogQHBhcmFtIFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICogQHJldHVybnMgVHlwZSBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShwcm9wZXJ0aWVzPzogZ29vZ2xlLnByb3RvYnVmLklUeXBlKTogZ29vZ2xlLnByb3RvYnVmLlR5cGU7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFR5cGUgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZ29vZ2xlLnByb3RvYnVmLlR5cGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBUeXBlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGVuY29kZShtZXNzYWdlOiBnb29nbGUucHJvdG9idWYuSVR5cGUsIHdyaXRlcj86ICRwcm90b2J1Zi5Xcml0ZXIpOiAkcHJvdG9idWYuV3JpdGVyO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBUeXBlIG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGdvb2dsZS5wcm90b2J1Zi5UeXBlLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgVHlwZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZTogZ29vZ2xlLnByb3RvYnVmLklUeXBlLCB3cml0ZXI/OiAkcHJvdG9idWYuV3JpdGVyKTogJHByb3RvYnVmLldyaXRlcjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgVHlwZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgICAgICogQHBhcmFtIHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICogQHJldHVybnMgVHlwZVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGRlY29kZShyZWFkZXI6ICgkcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXkpLCBsZW5ndGg/OiBudW1iZXIpOiBnb29nbGUucHJvdG9idWYuVHlwZTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgVHlwZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgICAgICogQHBhcmFtIHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBUeXBlXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlRGVsaW1pdGVkKHJlYWRlcjogKCRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheSkpOiBnb29nbGUucHJvdG9idWYuVHlwZTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBWZXJpZmllcyBhIFR5cGUgbWVzc2FnZS5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAgICAgICAgICAgICAqIEByZXR1cm5zIGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIHZlcmlmeShtZXNzYWdlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSk6IChzdHJpbmd8bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIFR5cGUgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICogQHBhcmFtIG9iamVjdCBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqIEByZXR1cm5zIFR5cGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBmcm9tT2JqZWN0KG9iamVjdDogeyBbazogc3RyaW5nXTogYW55IH0pOiBnb29nbGUucHJvdG9idWYuVHlwZTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBUeXBlIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIFR5cGVcbiAgICAgICAgICAgICAqIEBwYXJhbSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyB0b09iamVjdChtZXNzYWdlOiBnb29nbGUucHJvdG9idWYuVHlwZSwgb3B0aW9ucz86ICRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnMpOiB7IFtrOiBzdHJpbmddOiBhbnkgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFR5cGUgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEByZXR1cm5zIEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyB0b0pTT04oKTogeyBbazogc3RyaW5nXTogYW55IH07XG4gICAgICAgIH1cblxuICAgICAgICAvKiogUHJvcGVydGllcyBvZiBhIEZpZWxkLiAqL1xuICAgICAgICBpbnRlcmZhY2UgSUZpZWxkIHtcblxuICAgICAgICAgICAgLyoqIEZpZWxkIGtpbmQgKi9cbiAgICAgICAgICAgIGtpbmQ/OiAoZ29vZ2xlLnByb3RvYnVmLkZpZWxkLktpbmR8bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKiBGaWVsZCBjYXJkaW5hbGl0eSAqL1xuICAgICAgICAgICAgY2FyZGluYWxpdHk/OiAoZ29vZ2xlLnByb3RvYnVmLkZpZWxkLkNhcmRpbmFsaXR5fG51bGwpO1xuXG4gICAgICAgICAgICAvKiogRmllbGQgbnVtYmVyICovXG4gICAgICAgICAgICBudW1iZXI/OiAobnVtYmVyfG51bGwpO1xuXG4gICAgICAgICAgICAvKiogRmllbGQgbmFtZSAqL1xuICAgICAgICAgICAgbmFtZT86IChzdHJpbmd8bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKiBGaWVsZCB0eXBlVXJsICovXG4gICAgICAgICAgICB0eXBlVXJsPzogKHN0cmluZ3xudWxsKTtcblxuICAgICAgICAgICAgLyoqIEZpZWxkIG9uZW9mSW5kZXggKi9cbiAgICAgICAgICAgIG9uZW9mSW5kZXg/OiAobnVtYmVyfG51bGwpO1xuXG4gICAgICAgICAgICAvKiogRmllbGQgcGFja2VkICovXG4gICAgICAgICAgICBwYWNrZWQ/OiAoYm9vbGVhbnxudWxsKTtcblxuICAgICAgICAgICAgLyoqIEZpZWxkIG9wdGlvbnMgKi9cbiAgICAgICAgICAgIG9wdGlvbnM/OiAoZ29vZ2xlLnByb3RvYnVmLklPcHRpb25bXXxudWxsKTtcblxuICAgICAgICAgICAgLyoqIEZpZWxkIGpzb25OYW1lICovXG4gICAgICAgICAgICBqc29uTmFtZT86IChzdHJpbmd8bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKiBGaWVsZCBkZWZhdWx0VmFsdWUgKi9cbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT86IChzdHJpbmd8bnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogUmVwcmVzZW50cyBhIEZpZWxkLiAqL1xuICAgICAgICBjbGFzcyBGaWVsZCBpbXBsZW1lbnRzIElGaWVsZCB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBGaWVsZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3RydWN0b3IocHJvcGVydGllcz86IGdvb2dsZS5wcm90b2J1Zi5JRmllbGQpO1xuXG4gICAgICAgICAgICAvKiogRmllbGQga2luZC4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBraW5kOiBnb29nbGUucHJvdG9idWYuRmllbGQuS2luZDtcblxuICAgICAgICAgICAgLyoqIEZpZWxkIGNhcmRpbmFsaXR5LiAqL1xuICAgICAgICAgICAgcHVibGljIGNhcmRpbmFsaXR5OiBnb29nbGUucHJvdG9idWYuRmllbGQuQ2FyZGluYWxpdHk7XG5cbiAgICAgICAgICAgIC8qKiBGaWVsZCBudW1iZXIuICovXG4gICAgICAgICAgICBwdWJsaWMgbnVtYmVyOiBudW1iZXI7XG5cbiAgICAgICAgICAgIC8qKiBGaWVsZCBuYW1lLiAqL1xuICAgICAgICAgICAgcHVibGljIG5hbWU6IHN0cmluZztcblxuICAgICAgICAgICAgLyoqIEZpZWxkIHR5cGVVcmwuICovXG4gICAgICAgICAgICBwdWJsaWMgdHlwZVVybDogc3RyaW5nO1xuXG4gICAgICAgICAgICAvKiogRmllbGQgb25lb2ZJbmRleC4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBvbmVvZkluZGV4OiBudW1iZXI7XG5cbiAgICAgICAgICAgIC8qKiBGaWVsZCBwYWNrZWQuICovXG4gICAgICAgICAgICBwdWJsaWMgcGFja2VkOiBib29sZWFuO1xuXG4gICAgICAgICAgICAvKiogRmllbGQgb3B0aW9ucy4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBvcHRpb25zOiBnb29nbGUucHJvdG9idWYuSU9wdGlvbltdO1xuXG4gICAgICAgICAgICAvKiogRmllbGQganNvbk5hbWUuICovXG4gICAgICAgICAgICBwdWJsaWMganNvbk5hbWU6IHN0cmluZztcblxuICAgICAgICAgICAgLyoqIEZpZWxkIGRlZmF1bHRWYWx1ZS4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBkZWZhdWx0VmFsdWU6IHN0cmluZztcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IEZpZWxkIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIEZpZWxkIGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHByb3BlcnRpZXM/OiBnb29nbGUucHJvdG9idWYuSUZpZWxkKTogZ29vZ2xlLnByb3RvYnVmLkZpZWxkO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBGaWVsZCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBnb29nbGUucHJvdG9idWYuRmllbGQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBGaWVsZCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBlbmNvZGUobWVzc2FnZTogZ29vZ2xlLnByb3RvYnVmLklGaWVsZCwgd3JpdGVyPzogJHByb3RvYnVmLldyaXRlcik6ICRwcm90b2J1Zi5Xcml0ZXI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEZpZWxkIG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGdvb2dsZS5wcm90b2J1Zi5GaWVsZC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIEZpZWxkIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGVuY29kZURlbGltaXRlZChtZXNzYWdlOiBnb29nbGUucHJvdG9idWYuSUZpZWxkLCB3cml0ZXI/OiAkcHJvdG9idWYuV3JpdGVyKTogJHByb3RvYnVmLldyaXRlcjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgRmllbGQgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBwYXJhbSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHBhcmFtIFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIEZpZWxkXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlKHJlYWRlcjogKCRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheSksIGxlbmd0aD86IG51bWJlcik6IGdvb2dsZS5wcm90b2J1Zi5GaWVsZDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgRmllbGQgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHJldHVybnMgRmllbGRcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyOiAoJHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5KSk6IGdvb2dsZS5wcm90b2J1Zi5GaWVsZDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBWZXJpZmllcyBhIEZpZWxkIG1lc3NhZ2UuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAcmV0dXJucyBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyB2ZXJpZnkobWVzc2FnZTogeyBbazogc3RyaW5nXTogYW55IH0pOiAoc3RyaW5nfG51bGwpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBGaWVsZCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gb2JqZWN0IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICogQHJldHVybnMgRmllbGRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBmcm9tT2JqZWN0KG9iamVjdDogeyBbazogc3RyaW5nXTogYW55IH0pOiBnb29nbGUucHJvdG9idWYuRmllbGQ7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgRmllbGQgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgRmllbGRcbiAgICAgICAgICAgICAqIEBwYXJhbSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyB0b09iamVjdChtZXNzYWdlOiBnb29nbGUucHJvdG9idWYuRmllbGQsIG9wdGlvbnM/OiAkcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zKTogeyBbazogc3RyaW5nXTogYW55IH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBGaWVsZCB0byBKU09OLlxuICAgICAgICAgICAgICogQHJldHVybnMgSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHRvSlNPTigpOiB7IFtrOiBzdHJpbmddOiBhbnkgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5hbWVzcGFjZSBGaWVsZCB7XG5cbiAgICAgICAgICAgIC8qKiBLaW5kIGVudW0uICovXG4gICAgICAgICAgICBlbnVtIEtpbmQge1xuICAgICAgICAgICAgICAgIFRZUEVfVU5LTk9XTiA9IDAsXG4gICAgICAgICAgICAgICAgVFlQRV9ET1VCTEUgPSAxLFxuICAgICAgICAgICAgICAgIFRZUEVfRkxPQVQgPSAyLFxuICAgICAgICAgICAgICAgIFRZUEVfSU5UNjQgPSAzLFxuICAgICAgICAgICAgICAgIFRZUEVfVUlOVDY0ID0gNCxcbiAgICAgICAgICAgICAgICBUWVBFX0lOVDMyID0gNSxcbiAgICAgICAgICAgICAgICBUWVBFX0ZJWEVENjQgPSA2LFxuICAgICAgICAgICAgICAgIFRZUEVfRklYRUQzMiA9IDcsXG4gICAgICAgICAgICAgICAgVFlQRV9CT09MID0gOCxcbiAgICAgICAgICAgICAgICBUWVBFX1NUUklORyA9IDksXG4gICAgICAgICAgICAgICAgVFlQRV9HUk9VUCA9IDEwLFxuICAgICAgICAgICAgICAgIFRZUEVfTUVTU0FHRSA9IDExLFxuICAgICAgICAgICAgICAgIFRZUEVfQllURVMgPSAxMixcbiAgICAgICAgICAgICAgICBUWVBFX1VJTlQzMiA9IDEzLFxuICAgICAgICAgICAgICAgIFRZUEVfRU5VTSA9IDE0LFxuICAgICAgICAgICAgICAgIFRZUEVfU0ZJWEVEMzIgPSAxNSxcbiAgICAgICAgICAgICAgICBUWVBFX1NGSVhFRDY0ID0gMTYsXG4gICAgICAgICAgICAgICAgVFlQRV9TSU5UMzIgPSAxNyxcbiAgICAgICAgICAgICAgICBUWVBFX1NJTlQ2NCA9IDE4XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKiBDYXJkaW5hbGl0eSBlbnVtLiAqL1xuICAgICAgICAgICAgZW51bSBDYXJkaW5hbGl0eSB7XG4gICAgICAgICAgICAgICAgQ0FSRElOQUxJVFlfVU5LTk9XTiA9IDAsXG4gICAgICAgICAgICAgICAgQ0FSRElOQUxJVFlfT1BUSU9OQUwgPSAxLFxuICAgICAgICAgICAgICAgIENBUkRJTkFMSVRZX1JFUVVJUkVEID0gMixcbiAgICAgICAgICAgICAgICBDQVJESU5BTElUWV9SRVBFQVRFRCA9IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBQcm9wZXJ0aWVzIG9mIGFuIEVudW0uICovXG4gICAgICAgIGludGVyZmFjZSBJRW51bSB7XG5cbiAgICAgICAgICAgIC8qKiBFbnVtIG5hbWUgKi9cbiAgICAgICAgICAgIG5hbWU/OiAoc3RyaW5nfG51bGwpO1xuXG4gICAgICAgICAgICAvKiogRW51bSBlbnVtdmFsdWUgKi9cbiAgICAgICAgICAgIGVudW12YWx1ZT86IChnb29nbGUucHJvdG9idWYuSUVudW1WYWx1ZVtdfG51bGwpO1xuXG4gICAgICAgICAgICAvKiogRW51bSBvcHRpb25zICovXG4gICAgICAgICAgICBvcHRpb25zPzogKGdvb2dsZS5wcm90b2J1Zi5JT3B0aW9uW118bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKiBFbnVtIHNvdXJjZUNvbnRleHQgKi9cbiAgICAgICAgICAgIHNvdXJjZUNvbnRleHQ/OiAoZ29vZ2xlLnByb3RvYnVmLklTb3VyY2VDb250ZXh0fG51bGwpO1xuXG4gICAgICAgICAgICAvKiogRW51bSBzeW50YXggKi9cbiAgICAgICAgICAgIHN5bnRheD86IChnb29nbGUucHJvdG9idWYuU3ludGF4fG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIFJlcHJlc2VudHMgYW4gRW51bS4gKi9cbiAgICAgICAgY2xhc3MgRW51bSBpbXBsZW1lbnRzIElFbnVtIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEVudW0uXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXM/OiBnb29nbGUucHJvdG9idWYuSUVudW0pO1xuXG4gICAgICAgICAgICAvKiogRW51bSBuYW1lLiAqL1xuICAgICAgICAgICAgcHVibGljIG5hbWU6IHN0cmluZztcblxuICAgICAgICAgICAgLyoqIEVudW0gZW51bXZhbHVlLiAqL1xuICAgICAgICAgICAgcHVibGljIGVudW12YWx1ZTogZ29vZ2xlLnByb3RvYnVmLklFbnVtVmFsdWVbXTtcblxuICAgICAgICAgICAgLyoqIEVudW0gb3B0aW9ucy4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBvcHRpb25zOiBnb29nbGUucHJvdG9idWYuSU9wdGlvbltdO1xuXG4gICAgICAgICAgICAvKiogRW51bSBzb3VyY2VDb250ZXh0LiAqL1xuICAgICAgICAgICAgcHVibGljIHNvdXJjZUNvbnRleHQ/OiAoZ29vZ2xlLnByb3RvYnVmLklTb3VyY2VDb250ZXh0fG51bGwpO1xuXG4gICAgICAgICAgICAvKiogRW51bSBzeW50YXguICovXG4gICAgICAgICAgICBwdWJsaWMgc3ludGF4OiBnb29nbGUucHJvdG9idWYuU3ludGF4O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgRW51bSBpbnN0YW5jZSB1c2luZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKiBAcmV0dXJucyBFbnVtIGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHByb3BlcnRpZXM/OiBnb29nbGUucHJvdG9idWYuSUVudW0pOiBnb29nbGUucHJvdG9idWYuRW51bTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgRW51bSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBnb29nbGUucHJvdG9idWYuRW51bS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIEVudW0gbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZW5jb2RlKG1lc3NhZ2U6IGdvb2dsZS5wcm90b2J1Zi5JRW51bSwgd3JpdGVyPzogJHByb3RvYnVmLldyaXRlcik6ICRwcm90b2J1Zi5Xcml0ZXI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEVudW0gbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZ29vZ2xlLnByb3RvYnVmLkVudW0udmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBFbnVtIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGVuY29kZURlbGltaXRlZChtZXNzYWdlOiBnb29nbGUucHJvdG9idWYuSUVudW0sIHdyaXRlcj86ICRwcm90b2J1Zi5Xcml0ZXIpOiAkcHJvdG9idWYuV3JpdGVyO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYW4gRW51bSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgICAgICogQHBhcmFtIHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICogQHJldHVybnMgRW51bVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGRlY29kZShyZWFkZXI6ICgkcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXkpLCBsZW5ndGg/OiBudW1iZXIpOiBnb29nbGUucHJvdG9idWYuRW51bTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGFuIEVudW0gbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHJldHVybnMgRW51bVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGRlY29kZURlbGltaXRlZChyZWFkZXI6ICgkcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXkpKTogZ29vZ2xlLnByb3RvYnVmLkVudW07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVmVyaWZpZXMgYW4gRW51bSBtZXNzYWdlLlxuICAgICAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAgICAgICAgICogQHJldHVybnMgYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgdmVyaWZ5KG1lc3NhZ2U6IHsgW2s6IHN0cmluZ106IGFueSB9KTogKHN0cmluZ3xudWxsKTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGFuIEVudW0gbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICogQHBhcmFtIG9iamVjdCBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqIEByZXR1cm5zIEVudW1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBmcm9tT2JqZWN0KG9iamVjdDogeyBbazogc3RyaW5nXTogYW55IH0pOiBnb29nbGUucHJvdG9idWYuRW51bTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYW4gRW51bSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBFbnVtXG4gICAgICAgICAgICAgKiBAcGFyYW0gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgICAgICogQHJldHVybnMgUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgdG9PYmplY3QobWVzc2FnZTogZ29vZ2xlLnByb3RvYnVmLkVudW0sIG9wdGlvbnM/OiAkcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zKTogeyBbazogc3RyaW5nXTogYW55IH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBFbnVtIHRvIEpTT04uXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBKU09OIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgdG9KU09OKCk6IHsgW2s6IHN0cmluZ106IGFueSB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIFByb3BlcnRpZXMgb2YgYW4gRW51bVZhbHVlLiAqL1xuICAgICAgICBpbnRlcmZhY2UgSUVudW1WYWx1ZSB7XG5cbiAgICAgICAgICAgIC8qKiBFbnVtVmFsdWUgbmFtZSAqL1xuICAgICAgICAgICAgbmFtZT86IChzdHJpbmd8bnVsbCk7XG5cbiAgICAgICAgICAgIC8qKiBFbnVtVmFsdWUgbnVtYmVyICovXG4gICAgICAgICAgICBudW1iZXI/OiAobnVtYmVyfG51bGwpO1xuXG4gICAgICAgICAgICAvKiogRW51bVZhbHVlIG9wdGlvbnMgKi9cbiAgICAgICAgICAgIG9wdGlvbnM/OiAoZ29vZ2xlLnByb3RvYnVmLklPcHRpb25bXXxudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBSZXByZXNlbnRzIGFuIEVudW1WYWx1ZS4gKi9cbiAgICAgICAgY2xhc3MgRW51bVZhbHVlIGltcGxlbWVudHMgSUVudW1WYWx1ZSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBFbnVtVmFsdWUuXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXM/OiBnb29nbGUucHJvdG9idWYuSUVudW1WYWx1ZSk7XG5cbiAgICAgICAgICAgIC8qKiBFbnVtVmFsdWUgbmFtZS4gKi9cbiAgICAgICAgICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG5cbiAgICAgICAgICAgIC8qKiBFbnVtVmFsdWUgbnVtYmVyLiAqL1xuICAgICAgICAgICAgcHVibGljIG51bWJlcjogbnVtYmVyO1xuXG4gICAgICAgICAgICAvKiogRW51bVZhbHVlIG9wdGlvbnMuICovXG4gICAgICAgICAgICBwdWJsaWMgb3B0aW9uczogZ29vZ2xlLnByb3RvYnVmLklPcHRpb25bXTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IEVudW1WYWx1ZSBpbnN0YW5jZSB1c2luZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKiBAcmV0dXJucyBFbnVtVmFsdWUgaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUocHJvcGVydGllcz86IGdvb2dsZS5wcm90b2J1Zi5JRW51bVZhbHVlKTogZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgRW51bVZhbHVlIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBFbnVtVmFsdWUgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZW5jb2RlKG1lc3NhZ2U6IGdvb2dsZS5wcm90b2J1Zi5JRW51bVZhbHVlLCB3cml0ZXI/OiAkcHJvdG9idWYuV3JpdGVyKTogJHByb3RvYnVmLldyaXRlcjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgRW51bVZhbHVlIG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBFbnVtVmFsdWUgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2U6IGdvb2dsZS5wcm90b2J1Zi5JRW51bVZhbHVlLCB3cml0ZXI/OiAkcHJvdG9idWYuV3JpdGVyKTogJHByb3RvYnVmLldyaXRlcjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGFuIEVudW1WYWx1ZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgICAgICogQHBhcmFtIHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICogQHJldHVybnMgRW51bVZhbHVlXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlKHJlYWRlcjogKCRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheSksIGxlbmd0aD86IG51bWJlcik6IGdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWU7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhbiBFbnVtVmFsdWUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHJldHVybnMgRW51bVZhbHVlXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlRGVsaW1pdGVkKHJlYWRlcjogKCRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheSkpOiBnb29nbGUucHJvdG9idWYuRW51bVZhbHVlO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWVzIGFuIEVudW1WYWx1ZSBtZXNzYWdlLlxuICAgICAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAgICAgICAgICogQHJldHVybnMgYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgdmVyaWZ5KG1lc3NhZ2U6IHsgW2s6IHN0cmluZ106IGFueSB9KTogKHN0cmluZ3xudWxsKTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGFuIEVudW1WYWx1ZSBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gb2JqZWN0IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICogQHJldHVybnMgRW51bVZhbHVlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZnJvbU9iamVjdChvYmplY3Q6IHsgW2s6IHN0cmluZ106IGFueSB9KTogZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYW4gRW51bVZhbHVlIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIEVudW1WYWx1ZVxuICAgICAgICAgICAgICogQHBhcmFtIFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAqIEByZXR1cm5zIFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIHRvT2JqZWN0KG1lc3NhZ2U6IGdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWUsIG9wdGlvbnM/OiAkcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zKTogeyBbazogc3RyaW5nXTogYW55IH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBFbnVtVmFsdWUgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEByZXR1cm5zIEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyB0b0pTT04oKTogeyBbazogc3RyaW5nXTogYW55IH07XG4gICAgICAgIH1cblxuICAgICAgICAvKiogUHJvcGVydGllcyBvZiBhbiBPcHRpb24uICovXG4gICAgICAgIGludGVyZmFjZSBJT3B0aW9uIHtcblxuICAgICAgICAgICAgLyoqIE9wdGlvbiBuYW1lICovXG4gICAgICAgICAgICBuYW1lPzogKHN0cmluZ3xudWxsKTtcblxuICAgICAgICAgICAgLyoqIE9wdGlvbiB2YWx1ZSAqL1xuICAgICAgICAgICAgdmFsdWU/OiAoZ29vZ2xlLnByb3RvYnVmLklBbnl8bnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogUmVwcmVzZW50cyBhbiBPcHRpb24uICovXG4gICAgICAgIGNsYXNzIE9wdGlvbiBpbXBsZW1lbnRzIElPcHRpb24ge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgT3B0aW9uLlxuICAgICAgICAgICAgICogQHBhcmFtIFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzPzogZ29vZ2xlLnByb3RvYnVmLklPcHRpb24pO1xuXG4gICAgICAgICAgICAvKiogT3B0aW9uIG5hbWUuICovXG4gICAgICAgICAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuXG4gICAgICAgICAgICAvKiogT3B0aW9uIHZhbHVlLiAqL1xuICAgICAgICAgICAgcHVibGljIHZhbHVlPzogKGdvb2dsZS5wcm90b2J1Zi5JQW55fG51bGwpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgT3B0aW9uIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIE9wdGlvbiBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShwcm9wZXJ0aWVzPzogZ29vZ2xlLnByb3RvYnVmLklPcHRpb24pOiBnb29nbGUucHJvdG9idWYuT3B0aW9uO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBPcHRpb24gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZ29vZ2xlLnByb3RvYnVmLk9wdGlvbi52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIE9wdGlvbiBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBlbmNvZGUobWVzc2FnZTogZ29vZ2xlLnByb3RvYnVmLklPcHRpb24sIHdyaXRlcj86ICRwcm90b2J1Zi5Xcml0ZXIpOiAkcHJvdG9idWYuV3JpdGVyO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBPcHRpb24gbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZ29vZ2xlLnByb3RvYnVmLk9wdGlvbi52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIE9wdGlvbiBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZTogZ29vZ2xlLnByb3RvYnVmLklPcHRpb24sIHdyaXRlcj86ICRwcm90b2J1Zi5Xcml0ZXIpOiAkcHJvdG9idWYuV3JpdGVyO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYW4gT3B0aW9uIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgKiBAcGFyYW0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEBwYXJhbSBbbGVuZ3RoXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBPcHRpb25cbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBkZWNvZGUocmVhZGVyOiAoJHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5KSwgbGVuZ3RoPzogbnVtYmVyKTogZ29vZ2xlLnByb3RvYnVmLk9wdGlvbjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGFuIE9wdGlvbiBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgICAgICogQHBhcmFtIHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBPcHRpb25cbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyOiAoJHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5KSk6IGdvb2dsZS5wcm90b2J1Zi5PcHRpb247XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVmVyaWZpZXMgYW4gT3B0aW9uIG1lc3NhZ2UuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAcmV0dXJucyBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyB2ZXJpZnkobWVzc2FnZTogeyBbazogc3RyaW5nXTogYW55IH0pOiAoc3RyaW5nfG51bGwpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYW4gT3B0aW9uIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBvYmplY3QgUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKiBAcmV0dXJucyBPcHRpb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBmcm9tT2JqZWN0KG9iamVjdDogeyBbazogc3RyaW5nXTogYW55IH0pOiBnb29nbGUucHJvdG9idWYuT3B0aW9uO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhbiBPcHRpb24gbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgT3B0aW9uXG4gICAgICAgICAgICAgKiBAcGFyYW0gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgICAgICogQHJldHVybnMgUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgdG9PYmplY3QobWVzc2FnZTogZ29vZ2xlLnByb3RvYnVmLk9wdGlvbiwgb3B0aW9ucz86ICRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnMpOiB7IFtrOiBzdHJpbmddOiBhbnkgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIE9wdGlvbiB0byBKU09OLlxuICAgICAgICAgICAgICogQHJldHVybnMgSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHRvSlNPTigpOiB7IFtrOiBzdHJpbmddOiBhbnkgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBTeW50YXggZW51bS4gKi9cbiAgICAgICAgZW51bSBTeW50YXgge1xuICAgICAgICAgICAgU1lOVEFYX1BST1RPMiA9IDAsXG4gICAgICAgICAgICBTWU5UQVhfUFJPVE8zID0gMVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqIFByb3BlcnRpZXMgb2YgYW4gQW55LiAqL1xuICAgICAgICBpbnRlcmZhY2UgSUFueSB7XG5cbiAgICAgICAgICAgIC8qKiBBbnkgdHlwZV91cmwgKi9cbiAgICAgICAgICAgIHR5cGVfdXJsPzogKHN0cmluZ3xudWxsKTtcblxuICAgICAgICAgICAgLyoqIEFueSB2YWx1ZSAqL1xuICAgICAgICAgICAgdmFsdWU/OiAoVWludDhBcnJheXxudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBSZXByZXNlbnRzIGFuIEFueS4gKi9cbiAgICAgICAgY2xhc3MgQW55IGltcGxlbWVudHMgSUFueSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBBbnkuXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXM/OiBnb29nbGUucHJvdG9idWYuSUFueSk7XG5cbiAgICAgICAgICAgIC8qKiBBbnkgdHlwZV91cmwuICovXG4gICAgICAgICAgICBwdWJsaWMgdHlwZV91cmw6IHN0cmluZztcblxuICAgICAgICAgICAgLyoqIEFueSB2YWx1ZS4gKi9cbiAgICAgICAgICAgIHB1YmxpYyB2YWx1ZTogVWludDhBcnJheTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IEFueSBpbnN0YW5jZSB1c2luZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKiBAcmV0dXJucyBBbnkgaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUocHJvcGVydGllcz86IGdvb2dsZS5wcm90b2J1Zi5JQW55KTogZ29vZ2xlLnByb3RvYnVmLkFueTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgQW55IG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGdvb2dsZS5wcm90b2J1Zi5BbnkudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBBbnkgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZW5jb2RlKG1lc3NhZ2U6IGdvb2dsZS5wcm90b2J1Zi5JQW55LCB3cml0ZXI/OiAkcHJvdG9idWYuV3JpdGVyKTogJHByb3RvYnVmLldyaXRlcjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgQW55IG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGdvb2dsZS5wcm90b2J1Zi5BbnkudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBBbnkgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2U6IGdvb2dsZS5wcm90b2J1Zi5JQW55LCB3cml0ZXI/OiAkcHJvdG9idWYuV3JpdGVyKTogJHByb3RvYnVmLldyaXRlcjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGFuIEFueSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgICAgICogQHBhcmFtIHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICogQHJldHVybnMgQW55XG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlKHJlYWRlcjogKCRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheSksIGxlbmd0aD86IG51bWJlcik6IGdvb2dsZS5wcm90b2J1Zi5Bbnk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhbiBBbnkgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHJldHVybnMgQW55XG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlRGVsaW1pdGVkKHJlYWRlcjogKCRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheSkpOiBnb29nbGUucHJvdG9idWYuQW55O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWVzIGFuIEFueSBtZXNzYWdlLlxuICAgICAgICAgICAgICogQHBhcmFtIG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAgICAgICAgICogQHJldHVybnMgYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgdmVyaWZ5KG1lc3NhZ2U6IHsgW2s6IHN0cmluZ106IGFueSB9KTogKHN0cmluZ3xudWxsKTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGFuIEFueSBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gb2JqZWN0IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICogQHJldHVybnMgQW55XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZnJvbU9iamVjdChvYmplY3Q6IHsgW2s6IHN0cmluZ106IGFueSB9KTogZ29vZ2xlLnByb3RvYnVmLkFueTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYW4gQW55IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIEFueVxuICAgICAgICAgICAgICogQHBhcmFtIFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAqIEByZXR1cm5zIFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIHRvT2JqZWN0KG1lc3NhZ2U6IGdvb2dsZS5wcm90b2J1Zi5BbnksIG9wdGlvbnM/OiAkcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zKTogeyBbazogc3RyaW5nXTogYW55IH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBBbnkgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEByZXR1cm5zIEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyB0b0pTT04oKTogeyBbazogc3RyaW5nXTogYW55IH07XG4gICAgICAgIH1cblxuICAgICAgICAvKiogUHJvcGVydGllcyBvZiBhbiBFbXB0eS4gKi9cbiAgICAgICAgaW50ZXJmYWNlIElFbXB0eSB7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogUmVwcmVzZW50cyBhbiBFbXB0eS4gKi9cbiAgICAgICAgY2xhc3MgRW1wdHkgaW1wbGVtZW50cyBJRW1wdHkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgRW1wdHkuXG4gICAgICAgICAgICAgKiBAcGFyYW0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXM/OiBnb29nbGUucHJvdG9idWYuSUVtcHR5KTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IEVtcHR5IGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIEVtcHR5IGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHByb3BlcnRpZXM/OiBnb29nbGUucHJvdG9idWYuSUVtcHR5KTogZ29vZ2xlLnByb3RvYnVmLkVtcHR5O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBFbXB0eSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBnb29nbGUucHJvdG9idWYuRW1wdHkudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBFbXB0eSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBlbmNvZGUobWVzc2FnZTogZ29vZ2xlLnByb3RvYnVmLklFbXB0eSwgd3JpdGVyPzogJHByb3RvYnVmLldyaXRlcik6ICRwcm90b2J1Zi5Xcml0ZXI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEVtcHR5IG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGdvb2dsZS5wcm90b2J1Zi5FbXB0eS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtZXNzYWdlIEVtcHR5IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGVuY29kZURlbGltaXRlZChtZXNzYWdlOiBnb29nbGUucHJvdG9idWYuSUVtcHR5LCB3cml0ZXI/OiAkcHJvdG9idWYuV3JpdGVyKTogJHByb3RvYnVmLldyaXRlcjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGFuIEVtcHR5IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgKiBAcGFyYW0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEBwYXJhbSBbbGVuZ3RoXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBFbXB0eVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGRlY29kZShyZWFkZXI6ICgkcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXkpLCBsZW5ndGg/OiBudW1iZXIpOiBnb29nbGUucHJvdG9idWYuRW1wdHk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhbiBFbXB0eSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgICAgICogQHBhcmFtIHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBFbXB0eVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIGRlY29kZURlbGltaXRlZChyZWFkZXI6ICgkcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXkpKTogZ29vZ2xlLnByb3RvYnVmLkVtcHR5O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWVzIGFuIEVtcHR5IG1lc3NhZ2UuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAcmV0dXJucyBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHVibGljIHN0YXRpYyB2ZXJpZnkobWVzc2FnZTogeyBbazogc3RyaW5nXTogYW55IH0pOiAoc3RyaW5nfG51bGwpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYW4gRW1wdHkgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICogQHBhcmFtIG9iamVjdCBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqIEByZXR1cm5zIEVtcHR5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZnJvbU9iamVjdChvYmplY3Q6IHsgW2s6IHN0cmluZ106IGFueSB9KTogZ29vZ2xlLnByb3RvYnVmLkVtcHR5O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhbiBFbXB0eSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbWVzc2FnZSBFbXB0eVxuICAgICAgICAgICAgICogQHBhcmFtIFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAqIEByZXR1cm5zIFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgc3RhdGljIHRvT2JqZWN0KG1lc3NhZ2U6IGdvb2dsZS5wcm90b2J1Zi5FbXB0eSwgb3B0aW9ucz86ICRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnMpOiB7IFtrOiBzdHJpbmddOiBhbnkgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIEVtcHR5IHRvIEpTT04uXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBKU09OIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBwdWJsaWMgdG9KU09OKCk6IHsgW2s6IHN0cmluZ106IGFueSB9O1xuICAgICAgICB9XG4gICAgfVxufVxuIl19